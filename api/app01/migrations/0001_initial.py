# Generated by Django 2.0.6 on 2018-07-24 05:38

import app01.models
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_no', models.CharField(max_length=64, unique=True, verbose_name='mobile_no')),
                ('registration_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='registration_date')),
                ('username', models.CharField(max_length=64, unique=True, verbose_name='username')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('last_purchase_date', models.DateField(blank=True, null=True, verbose_name='last_purchase_date')),
                ('name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Member name')),
                ('points_bal', models.FloatField(default=0, verbose_name='points_bal')),
                ('total_points', models.FloatField(default=0, verbose_name='total_points')),
                ('dob', models.DateField(blank=True, null=True, verbose_name='Member birthday')),
                ('telephone', models.CharField(blank=True, max_length=64, null=True, verbose_name='telephone')),
                ('race', models.CharField(blank=True, max_length=64, null=True, verbose_name='race')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Member email')),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Campaign name')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='Campaign description')),
                ('gender', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Male'), (1, 'Female')]), blank=True, help_text='0:Male,1:Female', null=True, size=None, verbose_name='gender')),
                ('min_age', models.IntegerField(blank=True, null=True, verbose_name='min_age')),
                ('max_age', models.IntegerField(blank=True, null=True, verbose_name='max_age')),
                ('repetition_periods', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'daily'), (1, 'every mon'), (2, 'every tue'), (3, 'every wed'), (4, 'every thur'), (5, 'every fri'), (6, 'every sat'), (7, 'every sun'), (8, 'monthly')]), blank=True, null=True, size=None, verbose_name='repetition_periods')),
                ('days_of_month', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31)]), blank=True, null=True, size=None, verbose_name='days_of_month')),
                ('effective_date', models.DateField(verbose_name='Campaign effective Date')),
                ('expiring_date', models.DateField(verbose_name='Campaign Expiring Date')),
                ('every_1_dollar_bouns_points', models.FloatField(blank=True, null=True, verbose_name='every_1_dollar_bouns_points')),
                ('event_venue', models.CharField(blank=True, max_length=64, null=True, verbose_name='event_venue')),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'processing'), (1, 'waiting'), (2, 'launched'), (3, 'completed'), (4, 'archived')], help_text='0:processing,1:waiting,2:launched,3:completed,4:archived', verbose_name='Campaign state')),
            ],
        ),
        migrations.CreateModel(
            name='CampaignCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('every_spent', models.FloatField(blank=True, null=True, verbose_name='every_spent')),
                ('every_top_up', models.FloatField(blank=True, null=True, verbose_name='every_top_up')),
                ('every_use_points', models.FloatField(blank=True, null=True, verbose_name='every_use_points')),
                ('every_purchase_points', models.FloatField(blank=True, null=True, verbose_name='every_purchase_points')),
                ('online_actions', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Like our facebook page itea.sg'), (1, 'Like our facebook post'), (2, 'Rate us on facebook'), (3, 'Post on our facebook page'), (4, 'Share our facebook page/post'), (5, 'Like our instagram')]), blank=True, null=True, size=None, verbose_name='online_actions')),
                ('every_customers', models.IntegerField(blank=True, null=True, verbose_name='every_customers')),
                ('ordering_modes', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'cash'), (1, 'apple pay'), (2, 'andriod pay'), (3, 'visa'), (4, 'mastercard'), (5, 'ezylink'), (6, 'QR code'), (7, 'favepay'), (8, 'grabpay'), (9, 'Alipay'), (10, 'Internet Banking')]), blank=True, null=True, size=None, verbose_name='ordering_modes')),
                ('payment_modes', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Walk-in'), (1, 'Mobile ordering')]), blank=True, null=True, size=None, verbose_name='payment_modes')),
                ('other_actions', models.TextField(blank=True, null=True, verbose_name='other_actions')),
                ('limit_redemption', models.IntegerField(blank=True, null=True, verbose_name='limit_redemption')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaignconditions', to='app01.Campaign')),
            ],
        ),
        migrations.CreateModel(
            name='CampaignType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_discount_per', models.FloatField(blank=True, null=True, verbose_name='first_discount_per')),
                ('last_discount_per', models.FloatField(blank=True, null=True, verbose_name='last_discount_per')),
                ('first_discount_price', models.FloatField(blank=True, null=True, verbose_name='first_discount_price')),
                ('last_discount_price', models.FloatField(blank=True, null=True, verbose_name='last_discount_price')),
                ('bouns_points', models.FloatField(blank=True, null=True, verbose_name='Reward points')),
                ('top_up_money', models.FloatField(blank=True, null=True, verbose_name='top_up_money')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigntypes', to='app01.Campaign')),
                ('campaign_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='campaigntype', to='app01.CampaignCondition')),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_no', models.CharField(max_length=64, unique=True, verbose_name=' Member card number Member')),
                ('printed_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='The name of the member card')),
                ('membership_type_code', models.CharField(blank=True, max_length=64, null=True, verbose_name='Member type code')),
                ('membership_status_code', models.CharField(blank=True, max_length=64, null=True, verbose_name='Member status code')),
                ('membership_photo', models.CharField(blank=True, max_length=64, null=True, verbose_name='Member photo')),
                ('issue_date', models.DateTimeField(blank=True, null=True, verbose_name='Issue date')),
                ('effective_date', models.DateTimeField(blank=True, null=True, verbose_name='Effective Date')),
                ('expiry_date', models.DateTimeField(blank=True, null=True, verbose_name='Expiry Date ')),
                ('printed', models.NullBooleanField(verbose_name='printed')),
                ('printed_date', models.DateTimeField(blank=True, null=True, verbose_name='Printed Date')),
                ('renewed_date', models.DateTimeField(blank=True, null=True, verbose_name='Renewed Date')),
                ('tmp_effective_date', models.DateTimeField(blank=True, null=True, verbose_name='Tmp Effective Date')),
                ('tmp_expiry_date', models.DateTimeField(blank=True, null=True, verbose_name='Tmp Expiry Date')),
                ('tmp_membership_status_code', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tmp Membership Status Code')),
                ('points_bal', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Points Bal')),
                ('total_points_bal', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Total_Points Bal')),
                ('holding_points', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Holding Points')),
                ('remarks', models.CharField(blank=True, max_length=64, null=True, verbose_name='Remarks')),
                ('membership_discount', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Membership Discount')),
                ('tier_code', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tier Code')),
                ('tier_anniversary_start_date', models.DateTimeField(blank=True, null=True, verbose_name='Tier Anniversary Start Date')),
                ('tier_anniversary_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Tier Anniversary End Date')),
                ('loyalty_message', models.CharField(blank=True, max_length=64, null=True, verbose_name='Loyalty Message')),
                ('dollar_to_points_ratio', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Dollar to Point Ratio')),
                ('is_supplementary', models.NullBooleanField(verbose_name='Is Supplementary')),
                ('is_burn_supplementary', models.NullBooleanField(verbose_name='Is Burn Supplementary')),
                ('relation_id', models.CharField(blank=True, max_length=64, null=True, verbose_name='Relation Id')),
                ('primary_card_no', models.CharField(blank=True, max_length=64, null=True, verbose_name='Primary Card No')),
                ('primary_relation_id', models.CharField(blank=True, max_length=64, null=True, verbose_name='Primary Relation Id')),
                ('primary_card_expiry_date', models.DateTimeField(blank=True, null=True, verbose_name='Primary Card Expiry Date ')),
                ('primary_card_effective_date', models.DateTimeField(blank=True, null=True, verbose_name='Primary Card Effective Date')),
                ('pts_holding_days', models.IntegerField(blank=True, null=True, verbose_name='Pts Holding Days')),
                ('current_net_spent', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Current Net Spent')),
                ('pass_code', models.CharField(blank=True, max_length=64, null=True, verbose_name='Pass Code')),
                ('stored_value_balance', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Stored Value Balance')),
                ('currency', models.CharField(blank=True, max_length=64, null=True, verbose_name='Currency')),
                ('last_visited_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Visited Date')),
                ('last_visited_outlet', models.CharField(blank=True, max_length=64, null=True, verbose_name='Last Visited Outlet')),
                ('points_to_next_tier', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Points To Next Tier')),
                ('nett_to_next_tier', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Nett To Next Tier')),
                ('lucky_draw_conversion_pts_usage_type', models.CharField(blank=True, max_length=64, null=True)),
                ('lucky_draw_conversion_rate', models.CharField(blank=True, max_length=64, null=True, verbose_name='Lucky Draw Conversion Rate')),
                ('spent_quota_increasement', models.FloatField(blank=True, default=0, max_length=32, null=True)),
                ('spent_quota_increasement_expired_on', models.CharField(blank=True, max_length=64, null=True)),
                ('pickup_date', models.DateTimeField(blank=True, null=True, verbose_name='pickup_date')),
                ('pickup_by', models.CharField(blank=True, max_length=64, null=True, verbose_name='pickup_by')),
                ('current_rcnett_spent', models.IntegerField(blank=True, null=True, verbose_name='current_rcnett_spent')),
                ('cmc_earned_points', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='cmc_earned_points')),
                ('crc_earned_points', models.IntegerField(blank=True, null=True, verbose_name='crc_earned_points')),
                ('current_tier_nett', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='current_tier_nett')),
                ('current_tier_amt', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='current_tier_amt')),
                ('bring_fwd_tier_nett', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='bring_fwd_tier_nett')),
                ('bring_fwd_tier_amt', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='bring_fwd_tier_amt')),
                ('bring_fwd_tier_expiry', models.CharField(blank=True, max_length=64, null=True, verbose_name='bring_fwd_tier_expiry')),
                ('bring_fwd_tier_start_date', models.DateTimeField(blank=True, null=True, verbose_name='bring_fwd_tier_start_date')),
                ('extended_tier_anniversary_end_date', models.DateTimeField(blank=True, null=True)),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cards', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(verbose_name='quantity')),
                ('price', models.FloatField(verbose_name='price')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('status', models.IntegerField(choices=[(0, 'active'), (1, 'bought'), (2, 'deleted'), (3, 'invalid')], default=0, help_text='0:active,1:bought,2:deleted,3:invalid', verbose_name='status')),
                ('flavours', models.CharField(blank=True, max_length=32, null=True, verbose_name='flavours')),
                ('tea_base', models.IntegerField(blank=True, choices=[(0, 'FRUIT TEA'), (1, 'PREMUM TEA'), (2, 'MILK TEA')], help_text='0:FRUIT TEA,1:PREMUM TEA,2:MILK TEA', null=True, verbose_name='tea_base')),
                ('sweetness', models.IntegerField(blank=True, choices=[(0, 'less'), (1, 'more')], help_text='0:less,1:more', null=True, verbose_name='sweetness')),
                ('size', models.IntegerField(blank=True, choices=[(0, 'Meduim'), (1, 'Large')], help_text='0:Meduim,1:Large', null=True, verbose_name='size')),
                ('toppings', models.IntegerField(blank=True, choices=[(0, 'No Pearls'), (1, 'AiYu Jelly'), (2, 'Golden Bubbles'), (3, 'Oreo'), (4, 'White Jelly'), (5, 'Whipped Cream')], help_text='0:No Pearls,1:AiYu Jelly,2:Golden Bubbles,3:Oreo,4:White Jelly,5:Whipped Cream', null=True, verbose_name='toppings')),
                ('ice_level', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Less Ice'), (2, 'No Ice')], default=1, help_text='0:normal,1:less ice,2:no ice', null=True, verbose_name='ice_level')),
                ('sugar_level', models.IntegerField(blank=True, choices=[(0, '0%'), (1, '25%'), (2, '50%'), (3, '75%'), (4, '100%')], default=1, help_text='0:0%,1:25%,2:50%,3:75%,4:100%', null=True, verbose_name='sugar_level')),
                ('concentration', models.IntegerField(blank=True, choices=[(0, '0%'), (1, '25%'), (2, '50%'), (3, '75%'), (4, '100%')], default=1, help_text='0:0%,1:25%,2:50%,3:75%,4:100%', null=True, verbose_name='concentration')),
                ('is_new', models.BooleanField(default=False, verbose_name='is_new')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Product category name')),
                ('category_code', models.CharField(max_length=64, unique=True, verbose_name='category_code')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_content', models.CharField(blank=True, max_length=128, null=True, verbose_name='service_content')),
                ('service_satisfaction', models.PositiveSmallIntegerField(choices=[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)], verbose_name='service_satisfaction')),
                ('product_quality_content', models.CharField(blank=True, max_length=128, null=True, verbose_name='product_quality_content')),
                ('product_quality_satisfaction', models.PositiveSmallIntegerField(choices=[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)], verbose_name='product_quality_satisfaction')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
            ],
        ),
        migrations.CreateModel(
            name='InterestGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='Interest Group name')),
            ],
        ),
        migrations.CreateModel(
            name='Member_CampaignType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created')),
                ('campaign_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_campaigntypes', to='app01.CampaignType')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_campaigntypes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='description')),
                ('start_points', models.IntegerField(verbose_name='start_points')),
                ('renewal_points', models.IntegerField(verbose_name='renewal_points')),
                ('complimentary_m_drink_points', models.FloatField(blank=True, null=True, verbose_name='start_points')),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'processing'), (1, 'launched'), (2, 'archived')], help_text='0:processing,1:launched,2:archived', verbose_name='state')),
            ],
        ),
        migrations.CreateModel(
            name='Membership_Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='effective_date')),
                ('expiring_date', models.DateTimeField(default=app01.models.one_year_later, verbose_name='expiring_date')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'active'), (1, 'expired')], help_text='0:active,1:expired', verbose_name='status')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership_members', to=settings.AUTH_USER_MODEL)),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership_members', to='app01.Membership')),
            ],
        ),
        migrations.CreateModel(
            name='Occupation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='Occupation name')),
            ],
        ),
        migrations.CreateModel(
            name='Outlet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outlet_name', models.CharField(max_length=64, unique=True, verbose_name='Outlet name')),
                ('outlet_code', models.CharField(max_length=64, unique=True, verbose_name='Outlet code')),
                ('outlet_manager', models.CharField(max_length=64, verbose_name='outlet_manager')),
                ('outlet_district', models.CharField(max_length=64, verbose_name='outlet_district')),
                ('outlet_floor_area', models.FloatField(verbose_name='outlet_floor_area')),
                ('outlet_address', models.CharField(max_length=64, verbose_name='outlet_address')),
            ],
        ),
        migrations.CreateModel(
            name='Points_Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_number', models.FloatField(verbose_name='points_number')),
                ('method', models.PositiveSmallIntegerField(choices=[(0, 'Complete information'), (1, 'Binding email'), (2, 'Campaign reward points'), (3, 'Redeem vouchers')], help_text='0:Complete information,1:Binding email,2:Campaign reward points', verbose_name='method')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created')),
                ('campaigntype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app01.CampaignType')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='Product name')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='description')),
                ('price', models.FloatField(verbose_name='Product price')),
                ('tea_base', models.CharField(blank=True, max_length=32, null=True, verbose_name='Product tea_base')),
                ('item_code', models.CharField(max_length=64, unique=True, verbose_name='Product item_code')),
                ('created', models.DateTimeField(default=app01.models.one_year_later, verbose_name='Product created time')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='app01.Category')),
            ],
        ),
        migrations.CreateModel(
            name='RechargeRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.FloatField(verbose_name='money')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.PositiveSmallIntegerField(choices=[(0, 'ADMIN'), (1, 'POS'), (2, 'MEMBER'), (3, 'ANONYMOUS'), (4, 'APP')], help_text='0:admin,1:pos,2:member,3:anonymous,4:app', unique=True, verbose_name='Role name')),
            ],
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auth_token', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Token',
                'verbose_name_plural': 'Tokens',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Toppings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='Toppings name')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='description')),
                ('price', models.FloatField(verbose_name='Toppings price')),
            ],
        ),
        migrations.CreateModel(
            name='TransactDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.CharField(blank=True, max_length=128, null=True, verbose_name='remark')),
                ('quantity', models.IntegerField(verbose_name='quantity')),
                ('price', models.FloatField(verbose_name='price')),
                ('method', models.IntegerField(choices=[(0, 'eat in'), (1, 'take out')], help_text='0:eat in,1:take out', verbose_name='method')),
                ('sweetness', models.IntegerField(blank=True, choices=[(0, 'less'), (1, 'more')], help_text='0:less,1:more', null=True, verbose_name='sweetness')),
                ('size', models.IntegerField(choices=[(0, 'Meduim'), (1, 'Large')], help_text='0:Meduim,1:Large', verbose_name='size')),
                ('ice_level', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Less Ice'), (2, 'No Ice')], help_text='0:normal,1:less ice,2:no ice', null=True, verbose_name='ice_level')),
                ('sugar_level', models.IntegerField(blank=True, choices=[(0, '0%'), (1, '25%'), (2, '50%'), (3, '75%'), (4, '100%')], help_text='0:0%,1:25%,2:50%,3:75%,4:100%', null=True, verbose_name='sugar_level')),
                ('concentration', models.IntegerField(blank=True, choices=[(0, '0%'), (1, '25%'), (2, '50%'), (3, '75%'), (4, '100%')], help_text='0:0%,1:25%,2:50%,3:75%,4:100%', null=True, verbose_name='concentration')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transact_details', to='app01.Product')),
                ('toppings', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transact_details', to='app01.Toppings')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_points', models.FloatField(blank=True, null=True, verbose_name='reward_points')),
                ('redeemed_points', models.FloatField(blank=True, null=True, verbose_name='redeemed_points')),
                ('ordering_modes', models.PositiveSmallIntegerField(choices=[(0, 'cash'), (1, 'apple pay'), (2, 'andriod pay'), (3, 'visa'), (4, 'mastercard'), (5, 'ezylink'), (6, 'QR code'), (7, 'favepay'), (8, 'grabpay'), (9, 'Alipay'), (10, 'Internet Banking')], verbose_name='ordering_modes')),
                ('payment_modes', models.PositiveSmallIntegerField(choices=[(0, 'Walk-in'), (1, 'Mobile ordering')], verbose_name='payment_modes')),
                ('pos_no', models.CharField(blank=True, max_length=32, null=True, verbose_name='pos_no')),
                ('cashier_no', models.CharField(blank=True, max_length=32, null=True, verbose_name='cashier_no')),
                ('receipt_no', models.CharField(max_length=32, verbose_name='receipt_no')),
                ('transact_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='transact_datetime')),
                ('total_money', models.FloatField(verbose_name='total_money')),
                ('remark', models.CharField(blank=True, max_length=64, null=True, verbose_name='remark')),
                ('campaigns', models.ManyToManyField(blank=True, null=True, related_name='transactions', to='app01.Campaign')),
                ('campaigntypes', models.ManyToManyField(blank=True, null=True, related_name='transactions', to='app01.CampaignType')),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transaction', to=settings.AUTH_USER_MODEL)),
                ('outlet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction', to='app01.Outlet')),
            ],
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Voucher name')),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'Product'), (1, 'Size upgrade'), (2, 'Cash'), (3, 'Discount'), (4, 'Buy one get one free'), (5, 'Toppings')], help_text='0:Product,1:Size upgrade,2:Cash,3:Discount,4:Buy one get one free,5:Toppings', verbose_name='type')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='Voucher description')),
                ('voucher_code', models.CharField(max_length=32, unique=True, verbose_name='voucher_code')),
                ('effective_date', models.DateField(verbose_name='effective Date')),
                ('expiring_date', models.DateField(verbose_name='expiring_date')),
                ('redemption_points', models.FloatField(verbose_name='redemption_points')),
                ('toppings_number', models.IntegerField(blank=True, null=True, verbose_name='toppings_number')),
                ('product_size', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'medium'), (1, 'large')]), blank=True, help_text='0:medium,1:large', null=True, size=None, verbose_name='product_size')),
                ('product_number', models.IntegerField(blank=True, null=True, verbose_name='product_number')),
                ('number_purchase', models.IntegerField(blank=True, null=True, verbose_name='number_purchase')),
                ('number_complimentary_drinks', models.IntegerField(blank=True, null=True, verbose_name='number_complimentary_drinks')),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'processing'), (1, 'waiting'), (2, 'launched'), (3, 'completed'), (4, 'archived')], help_text='0:processing,1:waiting,2:launched,3:completed,4:archived', verbose_name='state')),
                ('exclusive_new_members', models.BooleanField(default=False, verbose_name='exclusive_new_members')),
                ('exclusive_non_members', models.BooleanField(default=False, verbose_name='exclusive_non_members')),
                ('redemption_per', models.IntegerField(blank=True, null=True, verbose_name='redemption_per')),
                ('limit_first_redemption', models.IntegerField(blank=True, null=True, verbose_name='limit_first_redemption')),
                ('other_limits', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Not valid with other promo'), (1, 'Non- refundable, non-transferable, non-reusable and non-exchangable for cash/points/credit in kind'), (2, 'Voucher(s) must be used upon payment'), (3, 'Voucher(s) must be utilized fully to the amount stated. Any unused amount will not be refunded'), (4, 'Purchase exxceeding redemption value shall be topped up with cash or other payment option'), (5, 'itea reserves the right to amend the terms and conditions without prior notice'), (6, 'Redemption must be shown upon ordering for counter ordering'), (7, 'itea will not be responsible for replacing expired vouchers')]), blank=True, null=True, size=None, verbose_name='other_limits')),
                ('discount_per_unparticipated_products', models.ManyToManyField(blank=True, null=True, related_name='vouchers_discount_per', to='app01.Product')),
                ('discount_price_unparticipated_products', models.ManyToManyField(blank=True, null=True, related_name='vouchers_discount_price', to='app01.Product')),
                ('limit_memberships', models.ManyToManyField(blank=True, null=True, related_name='vouchers', to='app01.Membership')),
                ('redemption_products', models.ManyToManyField(blank=True, null=True, related_name='vouchers_redemption', to='app01.Product')),
                ('redemption_toppings', models.ManyToManyField(blank=True, null=True, related_name='vouchers', to='app01.Toppings')),
                ('size_upgrade_unparticipated_products', models.ManyToManyField(blank=True, null=True, related_name='vouchers_upgrade', to='app01.Product')),
                ('unparticipated_outlets', models.ManyToManyField(blank=True, null=True, related_name='vouchers', to='app01.Outlet')),
            ],
        ),
        migrations.CreateModel(
            name='Voucher_Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'active'), (1, 'used'), (2, 'expired')], default=0, help_text='0:active,1:used,2:expired', verbose_name='Voucher status')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voucher_members', to=settings.AUTH_USER_MODEL)),
                ('voucher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voucher_members', to='app01.Voucher')),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.FloatField(default=0, verbose_name='balance')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('lastest_top_up', models.DateField(blank=True, null=True, verbose_name='lastest_top_up')),
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='transaction',
            name='redeemed_vouchers',
            field=models.ManyToManyField(blank=True, null=True, related_name='transaction_redeemed', to='app01.Voucher'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='reward_vouchers',
            field=models.ManyToManyField(blank=True, null=True, related_name='transaction_reward', to='app01.Voucher'),
        ),
        migrations.AddField(
            model_name='transactdetails',
            name='transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transact_details', to='app01.Transaction'),
        ),
        migrations.AddField(
            model_name='rechargerecord',
            name='wallet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rechargerecord', to='app01.Wallet'),
        ),
        migrations.AddField(
            model_name='membership',
            name='birthday_vouchers',
            field=models.ManyToManyField(blank=True, null=True, related_name='membership_birthday', to='app01.Voucher'),
        ),
        migrations.AddField(
            model_name='membership',
            name='complimentary_vouchers',
            field=models.ManyToManyField(blank=True, null=True, related_name='membership_compliment', to='app01.Voucher'),
        ),
        migrations.AddField(
            model_name='evaluation',
            name='transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation', to='app01.Transaction'),
        ),
        migrations.AddField(
            model_name='cart',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to='app01.Product'),
        ),
        migrations.AddField(
            model_name='campaigntype',
            name='free_vouchers',
            field=models.ManyToManyField(blank=True, null=True, related_name='campaigns', to='app01.Voucher'),
        ),
        migrations.AddField(
            model_name='campaigntype',
            name='upgrade_membership',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app01.Membership'),
        ),
        migrations.AddField(
            model_name='campaigncondition',
            name='every_purchase_l_drinks_flavors',
            field=models.ManyToManyField(blank=True, null=True, related_name='l_drinks_condition', to='app01.Product'),
        ),
        migrations.AddField(
            model_name='campaigncondition',
            name='every_purchase_m_drinks_flavors',
            field=models.ManyToManyField(blank=True, null=True, related_name='m_drinks_condition', to='app01.Product'),
        ),
        migrations.AddField(
            model_name='campaigncondition',
            name='every_purchase_products',
            field=models.ManyToManyField(blank=True, null=True, related_name='products_condition', to='app01.Product'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='memberships',
            field=models.ManyToManyField(blank=True, null=True, related_name='campaigns', to='app01.Membership'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='occupations',
            field=models.ManyToManyField(blank=True, null=True, related_name='campaigns', to='app01.Occupation'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='outlets',
            field=models.ManyToManyField(related_name='campaigns', to='app01.Outlet'),
        ),
        migrations.AddField(
            model_name='member',
            name='campaigntypes',
            field=models.ManyToManyField(blank=True, null=True, related_name='members', through='app01.Member_CampaignType', to='app01.CampaignType'),
        ),
        migrations.AddField(
            model_name='member',
            name='interestGroups',
            field=models.ManyToManyField(blank=True, null=True, related_name='members', to='app01.InterestGroup'),
        ),
        migrations.AddField(
            model_name='member',
            name='membership',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='app01.Membership'),
        ),
        migrations.AddField(
            model_name='member',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='app01.Role'),
        ),
        migrations.AddField(
            model_name='member',
            name='vouchers',
            field=models.ManyToManyField(through='app01.Voucher_Member', to='app01.Voucher'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['mobile_no'], name='mobile_no_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['username'], name='username_idx'),
        ),
    ]
